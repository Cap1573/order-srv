// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/order/order.proto

package go_micro_srv_order

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Order service

type OrderService interface {
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Order_StreamService, error)
}

type orderService struct {
	c    client.Client
	name string
}

func NewOrderService(name string, c client.Client) OrderService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.order"
	}
	return &orderService{
		c:    c,
		name: name,
	}
}

func (c *orderService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Order.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Order_StreamService, error) {
	req := c.c.NewRequest(c.name, "Order.Stream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &orderServiceStream{stream}, nil
}

type Order_StreamService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type orderServiceStream struct {
	stream client.Stream
}

func (x *orderServiceStream) Close() error {
	return x.stream.Close()
}

func (x *orderServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *orderServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *orderServiceStream) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Order service

type OrderHandler interface {
	Call(context.Context, *Request, *Response) error
	Stream(context.Context, *StreamingRequest, Order_StreamStream) error
}

func RegisterOrderHandler(s server.Server, hdlr OrderHandler, opts ...server.HandlerOption) error {
	type order interface {
		Call(ctx context.Context, in *Request, out *Response) error
		Stream(ctx context.Context, stream server.Stream) error
	}
	type Order struct {
		order
	}
	h := &orderHandler{hdlr}
	return s.Handle(s.NewHandler(&Order{h}, opts...))
}

type orderHandler struct {
	OrderHandler
}

func (h *orderHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.OrderHandler.Call(ctx, in, out)
}

func (h *orderHandler) Stream(ctx context.Context, stream server.Stream) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.OrderHandler.Stream(ctx, m, &orderStreamStream{stream})
}

type Order_StreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type orderStreamStream struct {
	stream server.Stream
}

func (x *orderStreamStream) Close() error {
	return x.stream.Close()
}

func (x *orderStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *orderStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *orderStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}
